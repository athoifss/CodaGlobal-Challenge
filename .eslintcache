[{"/home/hala/HackerEarth/codagloabal-challenge/src/index.js":"1","/home/hala/HackerEarth/codagloabal-challenge/src/App.js":"2","/home/hala/HackerEarth/codagloabal-challenge/src/Container.js":"3","/home/hala/HackerEarth/codagloabal-challenge/src/Context.js":"4","/home/hala/HackerEarth/codagloabal-challenge/src/UserSelection.js":"5","/home/hala/HackerEarth/codagloabal-challenge/src/Game.js":"6","/home/hala/HackerEarth/codagloabal-challenge/src/Sidebar.js":"7","/home/hala/HackerEarth/codagloabal-challenge/src/api.js":"8","/home/hala/HackerEarth/codagloabal-challenge/src/Searchbar.js":"9"},{"size":197,"mtime":1610901916453,"results":"10","hashOfConfig":"11"},{"size":4017,"mtime":1610903038658,"results":"12","hashOfConfig":"11"},{"size":530,"mtime":1610901881365,"results":"13","hashOfConfig":"11"},{"size":67,"mtime":1610901895173,"results":"14","hashOfConfig":"11"},{"size":5461,"mtime":1610902938444,"results":"15","hashOfConfig":"11"},{"size":5656,"mtime":1610901907669,"results":"16","hashOfConfig":"11"},{"size":2658,"mtime":1610901947049,"results":"17","hashOfConfig":"11"},{"size":289,"mtime":1610901847049,"results":"18","hashOfConfig":"11"},{"size":878,"mtime":1610901933453,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1lm146g",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/hala/HackerEarth/codagloabal-challenge/src/index.js",[],["44","45"],"/home/hala/HackerEarth/codagloabal-challenge/src/App.js",["46","47"],"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Container from \"./Container\";\nimport Context from \"./Context\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [usersSearchedSorted, setUsersSearchedSorted] = useState([]);\n  const [usersSelected, setUsersSelected] = useState([]);\n  const [countUsersSelected, setCountUsersSelected] = useState(0);\n  const [sidebar, setSidebar] = useState({\n    isOpen: true,\n    style: null,\n    data: [],\n  });\n\n  const [isGameStart, setIsGameStart] = useState(false);\n\n  function getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function handleUsers(arrUsers) {\n    let newUsers = arrUsers.map((user, i) => {\n      let userToAdd = { ...user };\n      userToAdd.id = i;\n      userToAdd.isSelected = false;\n      userToAdd.Level = getRandomNumber(1, 5);\n      userToAdd.Wins = 0;\n      userToAdd.Losses = 0;\n      return userToAdd;\n    });\n\n    setUsers(newUsers);\n    setUsersSearchedSorted(newUsers);\n  }\n\n  function sorted(sortBy, sortType) {\n    let usersToSort = [...users];\n\n    if (sortBy === \"Name\") {\n      usersToSort.sort((a, b) => {\n        let nameA = a[sortBy].toUpperCase();\n        let nameB = b[sortBy].toUpperCase();\n\n        if (sortType === \"asc\") {\n          if (nameA > nameB) {\n            return 1;\n          }\n          if (nameA < nameB) {\n            return -1;\n          }\n          return 0;\n        } else {\n          if (nameA > nameB) {\n            return -1;\n          }\n          if (nameA < nameB) {\n            return 1;\n          }\n          return 0;\n        }\n      });\n    } else {\n      usersToSort.sort((a, b) => {\n        let num1 = parseInt(a[sortBy]);\n        let num2 = parseInt(b[sortBy]);\n\n        if (sortType === \"asc\") {\n          if (num1 > num2) {\n            return 1;\n          }\n\n          if (num1 < num2) {\n            return -1;\n          }\n          return 0;\n        } else {\n          if (num1 > num2) {\n            return -1;\n          }\n\n          if (num1 < num2) {\n            return 1;\n          }\n          return 0;\n        }\n      });\n    }\n\n    setUsersSearchedSorted(usersToSort);\n  }\n\n  function handleIsGameStart(boolValue) {\n    setUsers(usersSearchedSorted);\n    setIsGameStart(boolValue);\n  }\n\n  function handleUsersWin(userId) {\n    let newUsers = [...users];\n    users.forEach((item) => {\n      if (item.id === userId) {\n        item.Wins = newUsers[userId].Wins + 1;\n        item.Price = newUsers[userId].Price * 2;\n      } else {\n        item.Losses = newUsers[userId].Losses + 1;\n      }\n    });\n    setUsersSelected(newUsers);\n  }\n\n  function handleUserSelection(id) {\n    let newUsers = [...usersSearchedSorted];\n    newUsers.forEach((user) => {\n      if (user.id === id) {\n        if (user.isSelected === false) {\n          if (countUsersSelected < 9) {\n            user.isSelected = true;\n            setCountUsersSelected((prev) => prev + 1);\n          }\n        } else {\n          setCountUsersSelected((prev) => prev - 1);\n          user.isSelected = false;\n        }\n      }\n    });\n    setUsersSearchedSorted(newUsers);\n  }\n\n  function handleSidebar(newSidebar) {\n    setSidebar(newSidebar);\n  }\n\n  function handleSearch(searchString) {\n    let searchResult = [];\n    users.forEach((user) => {\n      if (user.Name.toLowerCase().includes(searchString.toLowerCase())) {\n        searchResult.push(user);\n      }\n    });\n    setUsersSearchedSorted(searchResult);\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        users,\n        usersSearchedSorted,\n        sidebar,\n        isGameStart,\n\n        sorted,\n        handleIsGameStart,\n        handleUsers,\n        handleUserSelection,\n        handleUsersWin,\n        handleSearch,\n        handleSidebar,\n      }}\n    >\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Container} />\n        </Switch>\n      </Router>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","/home/hala/HackerEarth/codagloabal-challenge/src/Container.js",["48","49","50"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Sidebar from \"./Sidebar\";\nimport UserSelection from \"./UserSelection\";\nimport Game from \"./Game\";\n\nimport style from \"./Container.module.css\";\n\nexport default function Container() {\n  return (\n    <div className={style.wrapper}>\n      <Sidebar />\n      <Switch>\n        <Route exact path=\"/\" component={UserSelection} />\n        <Route exact path=\"/play\" component={Game} />\n      </Switch>\n    </div>\n  );\n}\n","/home/hala/HackerEarth/codagloabal-challenge/src/Context.js",[],"/home/hala/HackerEarth/codagloabal-challenge/src/UserSelection.js",["51"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getRequest } from \"./api\";\nimport Context from \"./Context\";\n\nimport style from \"./UserSelection.module.css\";\nimport styleSidebar from \"./Sidebar.module.css\";\n\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Searchbar from \"./Searchbar\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CustomCheckbox = withStyles({\n  root: {\n    color: \"#0015ff\",\n    \"&$checked\": {\n      color: \"#0015ff\",\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\nexport default function Container() {\n  const context = useContext(Context);\n\n  const [sortType, setSortType] = useState({\n    Name: \"asc\",\n    Level: \"asc\",\n    Bet: \"asc\",\n    Wins: \"asc\",\n    Price: '\"asc',\n  });\n\n  const [lastSorted, setLastSorted] = useState({ name: \"\", type: \"\" });\n\n  function handleSort(sortBy) {\n    let newSortType = { ...sortType };\n    context.sorted(sortBy, newSortType[sortBy]);\n    newSortType[sortBy] = newSortType[sortBy] === \"asc\" ? \"dsc\" : \"asc\";\n    setSortType(newSortType);\n\n    // let sortType = newSortType[sortBy]\n    setLastSorted({ name: sortBy, type: newSortType[sortBy] });\n  }\n\n  function handleSidebarOpen() {\n    let newSidebar = { ...context.sidebar };\n    if (!newSidebar.isOpen) {\n      newSidebar.isOpen = true;\n      newSidebar.style = styleSidebar.sidebarOpen;\n      context.handleSidebar(newSidebar);\n    }\n  }\n\n  function handleUserSelection(userId) {\n    context.handleUserSelection(userId);\n  }\n\n  function getUserData() {\n    getRequest(\"/bets7747a43.json\").then((resp) => {\n      context.handleUsers(resp.data);\n    });\n  }\n\n  function handleGameStart() {\n    context.handleIsGameStart(true);\n  }\n\n  useEffect(() => {\n    getUserData();\n  }, []);\n\n  return (\n    <div className={style.wrapper}>\n      <div className={style.buttonContainer}>\n        <Link className={style.buttonContainer} to=\"/play\">\n          <button onClick={handleGameStart}>Start Game</button>\n        </Link>\n      </div>\n      <Searchbar />\n      <div className={style.tableContainer}>\n        <div\n          className={`${style.ham} ${\n            context.sidebar.isOpen ? style.displayNone : style.displayFlex\n          }`}\n          onClick={handleSidebarOpen}\n        >\n          <div className={style.line}></div>\n          <div className={style.line}></div>\n          <div className={style.line}></div>\n        </div>\n        <table className={style.tableWrapper}>\n          <thead>\n            <tr className={style.rowHeader}>\n              <th className={style.checkbox}>Select</th>\n              <th onClick={handleSort.bind(this, \"Name\")} className={style.playerName}>\n                Player Name\n                {lastSorted.name === \"Name\" ? (\n                  lastSorted.type === \"asc\" ? (\n                    <span>&uarr;</span>\n                  ) : (\n                    <span>&darr;</span>\n                  )\n                ) : null}\n              </th>\n              <th onClick={handleSort.bind(this, \"Level\")}>\n                Level{\" \"}\n                {lastSorted.name === \"Level\" ? (\n                  lastSorted.type === \"asc\" ? (\n                    <span>&uarr;</span>\n                  ) : (\n                    <span>&darr;</span>\n                  )\n                ) : null}\n              </th>\n              <th>Avatar</th>\n              <th onClick={handleSort.bind(this, \"Bet\")}>\n                Bet\n                {lastSorted.name === \"Bet\" ? (\n                  lastSorted.type === \"asc\" ? (\n                    <span>&uarr;</span>\n                  ) : (\n                    <span>&darr;</span>\n                  )\n                ) : null}\n              </th>\n              <th onClick={handleSort.bind(this, \"Wins\")}>\n                Wins{\" \"}\n                {lastSorted.name === \"Wins\" ? (\n                  lastSorted.type === \"asc\" ? (\n                    <span>&uarr;</span>\n                  ) : (\n                    <span>&darr;</span>\n                  )\n                ) : null}\n              </th>\n              <th>Loss</th>\n              <th onClick={handleSort.bind(this, \"Price\")}>\n                {\" \"}\n                Price{\" \"}\n                {lastSorted.name === \"Price\" ? (\n                  lastSorted.type === \"asc\" ? (\n                    <span>&uarr;</span>\n                  ) : (\n                    <span>&darr;</span>\n                  )\n                ) : null}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {context.usersSearchedSorted.map((user) => {\n              return (\n                <tr key={user.id}>\n                  <td className={style.checkbox}>\n                    <CustomCheckbox\n                      color=\"primary\"\n                      checked={user.isSelected}\n                      onChange={handleUserSelection.bind(this, user.id)}\n                    />\n                  </td>\n                  <td className={style.playerName}>{user.Name}</td>\n                  <td>{user.Level}</td>\n                  <td>\n                    <img src={user[\"Profile Image\"]} alt=\"\" />\n                  </td>\n                  <td>{user.Bet}</td>\n                  <td>{user.Wins}</td>\n                  <td>{user.Losses}</td>\n                  <td>{user.Price}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","/home/hala/HackerEarth/codagloabal-challenge/src/Game.js",["52","53","54","55","56"],"import React, { useContext, useEffect, useState } from \"react\";\nimport Context from \"./Context\";\nimport style from \"./Game.module.css\";\nimport styleSidebar from \"./Sidebar.module.css\";\n\nimport trophy from \"./images/trophy.png\";\nimport bet from \"./images/bet.png\";\nimport coin from \"./images/coin.png\";\n\nexport default function Game() {\n  function getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  const context = useContext(Context);\n  const [users, setUsers] = useState({ usersTop: [], usersBottom: [] });\n  const [allUsersSelected, setAllUsersSelected] = useState([]);\n  const [randomBet, setRandomBet] = useState(null);\n\n  function handleSidebarOpen() {\n    let newSidebar = { ...context.sidebar };\n    if (!newSidebar.isOpen) {\n      newSidebar.isOpen = true;\n      newSidebar.style = styleSidebar.sidebarOpen;\n      context.handleSidebar(newSidebar);\n    }\n  }\n\n  function playGame(arrUsers) {\n    let randomNumber = getRandomNumber(1, 9);\n    setRandomBet(randomNumber);\n    arrUsers.forEach((user) => {\n      if (parseInt(user[\"Bet\"]) === randomNumber) {\n        context.handleUsersWin(user.id);\n      }\n    });\n  }\n\n  useEffect(() => {\n    let selectedUsers = context.usersSearchedSorted.filter((user) => user.isSelected);\n    let newUsersTop = selectedUsers.slice(0, 5);\n    let newUsersBottom = selectedUsers.slice(5, 11);\n    let arrAllUsersSelected = context.users.filter((user) => user.isSelected);\n    setUsers({ usersTop: newUsersTop, usersBottom: newUsersBottom });\n    setAllUsersSelected(arrAllUsersSelected);\n    playGame(arrAllUsersSelected);\n  }, []);\n\n  return (\n    <div className={style.wrapper}>\n      <button className={style.buttonPlay} onClick={playGame.bind(this, allUsersSelected)}>\n        Bet Again\n      </button>\n      <div\n        className={`${style.ham} ${context.sidebar.isOpen ? style.displayNone : style.displayFlex}`}\n        onClick={handleSidebarOpen}\n      >\n        <div className={style.line}></div>\n        <div className={style.line}></div>\n        <div className={style.line}></div>\n      </div>\n      <div className={style.cardsContainer}>\n        {users.usersTop.map((user) => {\n          return (\n            <div className={style.cardWrapper}>\n              <div className={style.top}>\n                <div className={style.imageContainer}>\n                  <img src={user[\"Profile Image\"]} alt=\"\" />\n                </div>\n                <div className={style.details}>\n                  <div>{user[\"Name\"]}</div>\n                  <div>Level {user[\"Level\"]}</div>\n                </div>\n              </div>\n              <div className={style.bottom}>\n                <div className={style.item}>\n                  <span>\n                    <img src={coin} alt=\"\" />\n                  </span>\n                  <span>{user[\"Price\"]}</span>\n                </div>\n                <div className={style.item}>\n                  <span>\n                    <img src={bet} alt=\"\" />\n                  </span>\n                  <span>{user[\"Bet\"]}</span>\n                </div>\n                <div className={style.item}>\n                  <span>\n                    <img src={trophy} alt=\"\" />\n                  </span>\n                  <span>{user[\"Wins\"]}</span>\n                </div>\n              </div>\n              <button\n                className={`${\n                  randomBet == null\n                    ? null\n                    : randomBet == user[\"Bet\"]\n                    ? style.fateWin\n                    : style.fateLoose\n                } ${style.fateButton}`}\n              >\n                {randomBet == null ? \"Pending\" : randomBet == user[\"Bet\"] ? \"Win\" : \"Loose\"}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      <div className={style.midContainer}>\n        <div className={style.number}>{randomBet}</div>\n      </div>\n      {/* TO-DO . Make user card a seperate component */}\n      <div className={style.cardsContainer}>\n        {users.usersBottom.map((user) => {\n          return (\n            <div className={style.cardWrapper}>\n              <div className={style.top}>\n                <div className={style.imageContainer}>\n                  <img src={user[\"Profile Image\"]} alt=\"\" />\n                </div>\n                <div className={style.details}>\n                  <div>{user[\"Name\"]}</div>\n                  <div>Level {user[\"Level\"]}</div>\n                </div>\n              </div>\n              <div className={style.bottom}>\n                <div className={style.item}>\n                  <span>\n                    <img src={coin} alt=\"\" />\n                  </span>\n                  <span>{user[\"Price\"]}</span>\n                </div>\n                <div className={style.item}>\n                  <span>\n                    <img src={bet} alt=\"\" />\n                  </span>\n                  <span>{user[\"Bet\"]}</span>\n                </div>\n                <div className={style.item}>\n                  <span>\n                    <img src={trophy} alt=\"\" />\n                  </span>\n                  <span>{user[\"Wins\"]}</span>\n                </div>\n              </div>\n              <button\n                className={`${\n                  randomBet == null\n                    ? null\n                    : randomBet == user[\"Bet\"]\n                    ? style.fateWin\n                    : style.fateLoose\n                } ${style.fateButton}`}\n              >\n                {randomBet == null ? \"Pending\" : randomBet == user[\"Bet\"] ? \"Win\" : \"Loose\"}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","/home/hala/HackerEarth/codagloabal-challenge/src/Sidebar.js",["57"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Context from \"./Context\";\nimport style from \"./Sidebar.module.css\";\n\nimport trophy from \"./images/trophy.png\";\nimport bet from \"./images/bet.png\";\nimport coin from \"./images/coin.png\";\n\nexport default function Sidebar() {\n  const context = useContext(Context);\n  const [usersSelected, setUsersSelected] = useState([]);\n\n  function handleSidebarCollapse() {\n    let newSidebar = { ...context.sidebar };\n    if (newSidebar.isOpen) {\n      newSidebar.isOpen = false;\n      newSidebar.style = style.sidebarClose;\n      context.handleSidebar(newSidebar);\n    }\n  }\n\n  function handleGameStart() {\n    context.handleIsGameStart(true);\n  }\n\n  useEffect(() => {\n    let newSidebar = { ...context.sidebar };\n    newSidebar.isOpen = true;\n    newSidebar.style = style.sidebarOpen;\n    context.handleSidebar(newSidebar);\n  }, []);\n\n  useEffect(() => {\n    let arrUsersSelected = context.usersSearchedSorted.filter((user) => user.isSelected);\n    setUsersSelected(arrUsersSelected);\n  }, [context.usersSearchedSorted]);\n\n  return (\n    <div className={`${style.wrapper} ${context.sidebar.style}`}>\n      <div\n        className={`${style.ham} ${context.sidebar.isOpen ? style.displayFlex : style.displayNone}`}\n        onClick={handleSidebarCollapse}\n      >\n        <div className={style.line}></div>\n        <div className={style.line}></div>\n        <div className={style.line}></div>\n      </div>\n\n      <h2 className={style.header}>Playing 9</h2>\n      {usersSelected.map((item) => {\n        return (\n          <div key={item.id} className={style.userWrapper}>\n            <div className={style.imageContainer}>\n              <img src={item[\"Profile Image\"]} alt=\"\" />\n            </div>\n            <div className={style.midContainer}>\n              <div className={style.top}>{item[\"Name\"]}</div>\n              <div className={style.bottom}>\n                <div>\n                  <img src={trophy} alt=\"\" />\n                  <span>{item.Wins}</span>\n                </div>\n                <div>\n                  <img className={style.bet} src={bet} alt=\"\" />\n                  <span>{item.Bet}</span>\n                </div>\n              </div>\n            </div>\n            <div className={style.priceContainer}>\n              <img src={coin} alt=\"\" />\n              {item[\"Price\"]}\n            </div>\n          </div>\n        );\n      })}\n\n      {context.isGameStart ? null : (\n        <Link className={style.buttonContainer} to=\"/play\">\n          <button onClick={handleGameStart}>Start Game</button>\n        </Link>\n      )}\n    </div>\n  );\n}\n","/home/hala/HackerEarth/codagloabal-challenge/src/api.js",[],"/home/hala/HackerEarth/codagloabal-challenge/src/Searchbar.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":26},{"ruleId":"62","severity":1,"message":"66","line":9,"column":10,"nodeType":"64","messageId":"65","endLine":9,"endColumn":23},{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":26},{"ruleId":"62","severity":1,"message":"67","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"68","line":1,"column":38,"nodeType":"64","messageId":"65","endLine":1,"endColumn":48},{"ruleId":"69","severity":1,"message":"70","line":71,"column":6,"nodeType":"71","endLine":71,"endColumn":8,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"73","line":46,"column":6,"nodeType":"71","endLine":46,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":98,"column":33,"nodeType":"77","messageId":"78","endLine":98,"endColumn":35},{"ruleId":"75","severity":1,"message":"76","line":103,"column":60,"nodeType":"77","messageId":"78","endLine":103,"endColumn":62},{"ruleId":"75","severity":1,"message":"76","line":150,"column":33,"nodeType":"77","messageId":"78","endLine":150,"endColumn":35},{"ruleId":"75","severity":1,"message":"76","line":155,"column":60,"nodeType":"77","messageId":"78","endLine":155,"endColumn":62},{"ruleId":"69","severity":1,"message":"79","line":32,"column":6,"nodeType":"71","endLine":32,"endColumn":8,"suggestions":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'usersSelected' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["83"],"React Hook useEffect has missing dependencies: 'context.users', 'context.usersSearchedSorted', and 'playGame'. Either include them or remove the dependency array.",["84"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'context'. Either include it or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [getUserData]",{"range":"92","text":"93"},"Update the dependencies array to be: [context.users, context.usersSearchedSorted, playGame]",{"range":"94","text":"95"},"Update the dependencies array to be: [context]",{"range":"96","text":"97"},[1815,1817],"[getUserData]",[1614,1616],"[context.users, context.usersSearchedSorted, playGame]",[927,929],"[context]"]